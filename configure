#!/usr/bin/env bash

CC=gcc
COMPILER_PREFIX=
DEBUG=
CFLAGS="-Wall"
FLAGS=""
LDFLAGS=""
LDFLAGS_UTIL=""
DFLAGS=""
CONFIG_EXT=""
INSTALL_PREFIX="/usr/local"
INSTALL_BIN=
INSTALL_INCLUDES=
INCLUDE_PATH=
ASM_OBJS_ALL=""
DISASM_OBJS_ALL=""
TABLE_OBJS_ALL=""
SIM_OBJS_ALL=""
DFLAGS_ALL="-DENABLE_65XX -DENABLE_680X -DENABLE_68HC08 -DENABLE_680X0 -DENABLE_805X -DENABLE_ARM -DENABLE_AVR8 -DENABLE_DSPIC -DENABLE_MIPS -DENABLE_MSP430 -DENABLE_STM8 -DENABLE_THUMB -DENABLE_TMS1000 -DENABLE_TMS9900 -DENABLE_Z80"
ASM_OBJS="asm_common.o"
DISASM_OBJS="disasm_common.o"
TABLE_OBJS=""
SIM_OBJS=""
COMMON_OBJS="assembler.o cpu_list.o directives_data.o directives_if.o directives_include.o eval_expression.o print_error.o write_elf.o write_hex.o get_tokens.o ifdef_expression.o lookup_tables.o macros.o memory.o parse_elf.o parse_hex.o"
PROG_OBJS="lpc.o serial.o"

for file in asm/*.c
do
  if [[ ! ${file} =~ "template" ]]
  then
    file=${file##*/}
    ASM_OBJS_ALL="${ASM_OBJS_ALL} ${file%.c}.o"
  fi
done

for file in disasm/*.c
do
  if [[ ! ${file} =~ "template" ]]
  then
    file=${file##*/}
    DISASM_OBJS_ALL="${DISASM_OBJS_ALL} ${file%.c}.o"
  fi
done

for file in table/*.c
do
  if [[ ! ${file} =~ "template" ]]
  then
    file=${file##*/}
    TABLE_OBJS_ALL="${TABLE_OBJS_ALL} ${file%.c}.o"
  fi
done

for file in simulate/*.c
do
  if [[ ! ${file} =~ "template" ]]
  then
    file=${file##*/}
    SIM_OBJS_ALL="${SIM_OBJS_ALL} ${file%.c}.o"
  fi
done

targetos=`uname -s`
case $targetos in
MINGW*)
#CFLAGS="${CFLAGS} -DWINDOWS -mwindows"
CONFIG_EXT=".exe"
INSTALL_PREFIX="/c/Program Files/naken_asm"
;;
esac

show_help()
{
  echo
  echo "Usage: ./configure [options]"
  echo
  echo "  --help                    list options"
  echo "  --cflags=CFLAGS           extra compiler flags"
  echo "  --ldflags=LDFLAGS         extra linker flags"
  echo "  --install-prefix=PATH     base path to install to (${INSTALL_PREFIX})"
  echo "  --include-path=PATH       default: (${INSTALL_PREFIX}/share/naken_asm/includes)"
  echo "  --compiler-prefix=PREFIX  for cross-compilers"
  echo "  --enable-debug            compile in debug code"
  #echo "  --disable-elf             disable elf file option"
  echo "  --enable-all              compile in support for all CPU's"
  echo "  --enable-65xx             compile in support for 6502/6510 etc"
  echo "  --enable-680x             compile in support for 6800 series"
  echo "  --enable-68hc08           compile in support for 68hc08 series"
  echo "  --enable-680x0            compile in support for 680x0 series"
  echo "  --enable-805x             compile in support for 8051/8052"
  echo "  --enable-arm              compile in support for ARM"
  echo "  --enable-avr8             compile in support for Atmel AVR8"
  echo "  --enable-dspic            compile in support for dsPIC and PIC24"
  echo "  --enable-mips             compile in support for MIPS"
  echo "  --enable-msp430           compile in support for MSP430 and MSP430X"
  echo "  --enable-stm8             compile in support for STM8"
  echo "  --enable-thumb            compile in support for thumb"
  echo "  --enable-tms1000          compile in support for tms1000/tms1100"
  echo "  --enable-tms9900          compile in support for tms9900"
  echo "  --enable-z80              compile in support for z80"
  echo

  exit
}

test_compiler()
{
  cat >config.c <<EOF
  main() { }
EOF

  ${1} -o config config.c >>config.log 2>&1
}

test_lib()
{
  cat >config.c <<EOF
main() { }
EOF

  ${COMPILER_PREFIX}${CC} -o config config.c $1 ${LDFLAGS} >>config.log 2>&1
}

test_include()
{
  cat >config.c <<EOF
#include <stdio.h>
#include <stdlib.h>
#include <${1}>
int main() { return 0; }
EOF

  ${COMPILER_PREFIX}${CC} -c config.c ${CFLAGS} >>config.log 2>&1
}

test_strip()
{
  cat >config.c <<EOF
int main() { return 0; }
EOF
  a=`${COMPILER_PREFIX}${CC} -o config config.c -s 2>&1 >>config.log | grep 'option -s is obsolete'`
  if [ "${a}" == "" ]
  then
    LDFLAGS="${LDFLAGS} -s"
  fi
}

instr()
{
  for s in $2; do
    case "${s}" in
    *${1}*) return 0
    ;;
    esac
  done

  return 1
}

cleanup()
{
  rm -f config.c
  rm -f config.o
  rm -f config.exe
  rm -f config
  rm -f config.log
}

for option in $@; do

  optval="${option#*=}"

  case "$option" in
  --help) show_help
  ;;
  --enable-debug) DEBUG="-DDEBUG -g"
  ;;
  --disable-elf) CFLAGS="${CFLAGS} -DDISABLE_ELF"
  ;;
  --cflags=*) CFLAGS="${CFLAGS} $optval"
  ;;
  --ldflags=*) LDFLAGS="${LDFLAGS} $optval"
  ;;
  --compiler-prefix=*) COMPILER_PREFIX="$optval"
  ;;
  --install-prefix=*) INSTALL_PREFIX="$optval"
  ;;
  --enable-all)
    ASM_OBJS="${ASM_OBJS_ALL}"
    DISASM_OBJS="${DISASM_OBJS_ALL}"
    SIM_OBJS="${SIM_OBJS_ALL}"
    TABLE_OBJS="${TABLE_OBJS_ALL}"
    DFLAGS="${DFLAGS_ALL}"
  ;;
  --enable-65xx)
    ASM_OBJS="${ASM_OBJS} asm_65xx.o"
    DISASM_OBJS="${DISASM_OBJS} disasm_65xx.o"
    SIM_OBJS="${SIM_OBJS} simulate_65xx.o"
    TABLE_OBJS="${TABLE_OBJS} table_65xx.o"
    DFLAGS="${DFLAGS} -DENABLE_65XX"
  ;;
  --enable-680x)
    ASM_OBJS="${ASM_OBJS} asm_680x.o"
    DISASM_OBJS="${DISASM_OBJS} disasm_680x.o"
    TABLE_OBJS="${TABLE_OBJS} table_680x.o"
    DFLAGS="${DFLAGS} -DENABLE_680X"
  ;;
  --enable-68hc08)
    ASM_OBJS="${ASM_OBJS} asm_68hc08.o"
    DISASM_OBJS="${DISASM_OBJS} disasm_68hc08.o"
    TABLE_OBJS="${TABLE_OBJS} table_68hc08.o"
    DFLAGS="${DFLAGS} -DENABLE_68HC08"
  ;;
  --enable-680x0)
    ASM_OBJS="${ASM_OBJS} asm_680x0.o"
    DISASM_OBJS="${DISASM_OBJS} disasm_680x0.o"
    TABLE_OBJS="${TABLE_OBJS} table_680x0.o"
    DFLAGS="${DFLAGS} -DENABLE_680X0"
  ;;
  --enable-805x)
    ASM_OBJS="${ASM_OBJS} asm_805x.o"
    DISASM_OBJS="${DISASM_OBJS} disasm_805x.o"
    TABLE_OBJS="${TABLE_OBJS} table_805x.o"
    DFLAGS="${DFLAGS} -DENABLE_805X"
  ;;
  --enable-arm)
    ASM_OBJS="${ASM_OBJS} asm_arm.o"
    DISASM_OBJS="${DISASM_OBJS} disasm_arm.o"
    DFLAGS="${DFLAGS} -DENABLE_ARM"
  ;;
  --enable-avr8)
    ASM_OBJS="${ASM_OBJS} asm_avr8"
    DISASM_OBJS="${DISASM_OBJS} disasm_avr8"
    DFLAGS="${DFLAGS} -DENABLE_AVR8"
  ;;
  --enable-dspic)
    ASM_OBJS="${ASM_OBJS} asm_dspic.o"
    DISASM_OBJS="${DISASM_OBJS} disasm_dspic.o"
    TABLE_OBJS="${TABLE_OBJS} table_dspic.o"
    DFLAGS="${DFLAGS} -DENABLE_DSPIC"
  ;;
  --enable-mips)
    ASM_OBJS="${ASM_OBJS} asm_mips.o"
    DISASM_OBJS="${DISASM_OBJS} disasm_mips.o"
    TABLE_OBJS="${TABLE_OBJS} table_mips.o"
    DFLAGS="${DFLAGS} -DENABLE_MIPS"
  ;;
  --enable-msp430)
    ASM_OBJS="${ASM_OBJS} asm_msp430.o"
    DISASM_OBJS="${DISASM_OBJS} disasm_msp430.o"
    SIM_OBJS="${SIM_OBJS} simulate_msp430.o"
    DFLAGS="${DFLAGS} -DENABLE_MSP430"
  ;;
  --enable-stm8)
    ASM_OBJS="${ASM_OBJS} asm_stm8.o"
    DISASM_OBJS="${DISASM_OBJS} disasm_stm8.o"
    TABLE_OBJS="${TABLE_OBJS} table_stm8.o"
    DFLAGS="${DFLAGS} -DENABLE_STM8"
  ;;
  --enable-thumb)
    ASM_OBJS="${ASM_OBJS} asm_thumb"
    DISASM_OBJS="${DISASM_OBJS} disasm_thumb"
    TABLE_OBJS="${TABLE_OBJS} table_thumb.o"
    DFLAGS="${DFLAGS} -DENABLE_THUMB"
  ;;
  --enable-tms1000)
    ASM_OBJS="${ASM_OBJS} asm_tms1000.o"
    DISASM_OBJS="${DISASM_OBJS} disasm_tms1000.o"
    TABLE_OBJS="${TABLE_OBJS} table_tms1000.o"
    DFLAGS="${DFLAGS} -DENABLE_TMS1000"
  ;;
  --enable-tms9900)
    ASM_OBJS="${ASM_OBJS} asm_tms9900.o"
    DISASM_OBJS="${DISASM_OBJS} disasm_tms9900.o"
    TABLE_OBJS="${TABLE_OBJS} table_tms9900.o"
    DFLAGS="${DFLAGS} -DENABLE_TMS9900"
  ;;
  --enable-z80)
    ASM_OBJS="${ASM_OBJS} asm_z80.o"
    DISASM_OBJS="${DISASM_OBJS} disasm_z80.o"
    TABLE_OBJS="${TABLE_OBJS} table_z80.o"
    DFLAGS="${DFLAGS} -DENABLE_Z80"
  ;;
  esac
done

if [ "${ASM_OBJS}" == "asm_common.o" ]
then
  ASM_OBJS="${ASM_OBJS_ALL}"
  DISASM_OBJS="${DISASM_OBJS_ALL}"
  SIM_OBJS="${SIM_OBJS_ALL}"
  TABLE_OBJS="${TABLE_OBJS_ALL}"
  DFLAGS="${DFLAGS_ALL}"
fi

if test_compiler "gcc"
then
  CC="gcc"
elif test_compiler "cc"
then
  CC="cc"
fi

#if test_lib "-lws2_32"; then LDFLAGS="${LDFLAGS} -lws2_32"; fi
#if test_lib "-lwinmm"; then LDFLAGS="${LDFLAGS} -lwinmm"; fi
#if test_lib "-luser32"; then LDFLAGS="${LDFLAGS} -luser32"; fi
if test_lib "-lreadline"
then
  if test_include "readline/readline.h"
  then
    LDFLAGS_UTIL="${LDFLAGS_UTIL} -lreadline"
    CFLAGS="${CFLAGS} -DREADLINE"
  fi
fi

if [ "${DEBUG}" = "" ]
then
  CFLAGS="${CFLAGS} -O3"
else
  CFLAGS="${CFLAGS} ${DEBUG}"
fi

#if ! instr "WINDOWS" "${FLAGS}"
#then
#  a=`${COMPILER_PREFIX}${CC} --version`
#
#  if instr "mingw" "${a}"
#  then
#    FLAGS="${FLAGS} -DWINDOWS -mwindows"
#    CONFIG_EXT=".exe"
#  fi
#fi

if instr "mingw" "${COMPILER_PREFIX}"
then
  CONFIG_EXT=".exe"
fi

if ! instr "WINDOWS" "${CFLAGS}"
then
  INSTALL_BIN=${INSTALL_PREFIX}/bin
  INSTALL_INCLUDES=${INSTALL_PREFIX}/share/naken_asm
else
  INSTALL_BIN=${INSTALL_PREFIX}
  INSTALL_INCLUDES=${INSTALL_PREFIX}
fi

if [ "${INCLUDE_PATH}" = "" ]
then
  INCLUDE_PATH="${INSTALL_INCLUDES}/include"
fi

test_strip

cleanup

echo "# Generated include file" > config.mak
echo "# $0 $*" >> config.mak
echo >> config.mak
echo "CC=${COMPILER_PREFIX}${CC}" >> config.mak
echo "COMPILER_PREFIX=${COMPILER_PREFIX}" >> config.mak
echo "LDFLAGS=${LDFLAGS}" >> config.mak
echo "LDFLAGS_UTIL=${LDFLAGS_UTIL}" >> config.mak
echo "CFLAGS=${CFLAGS}" >> config.mak
echo "DFLAGS=${DFLAGS}" >> config.mak
echo "INSTALL_BIN=${INSTALL_BIN}" >> config.mak
echo "INSTALL_INCLUDES=${INSTALL_INCLUDES}" >> config.mak
echo "INCLUDE_PATH=${INCLUDE_PATH}" >> config.mak
echo "CONFIG_EXT=${CONFIG_EXT}" >> config.mak
echo "ASM_OBJS=${ASM_OBJS}" >> config.mak
echo "DISASM_OBJS=${DISASM_OBJS}" >> config.mak
echo "COMMON_OBJS=${COMMON_OBJS}" >> config.mak
echo "TABLE_OBJS=${TABLE_OBJS}" >> config.mak
echo "SIM_OBJS=${SIM_OBJS}" >> config.mak
echo "PROG_OBJS=${PROG_OBJS}" >> config.mak
echo >> config.mak

echo
echo "Configuration:"
echo "  Install to: ${INSTALL_PREFIX}"
echo "            : ${INSTALL_BIN}, ${INSTALL_INCLUDES}/include"
echo "    Compiler: ${COMPILER_PREFIX}${CC}"
echo "     LDFLAGS: ${LDFLAGS}"
echo "UTIL LDFLAGS: ${LDFLAGS_UTIL}"
echo "      CFLAGS: ${CFLAGS}"
echo "     DEFINES: ${DFLAGS}"
echo "INCLUDE_PATH: ${INCLUDE_PATH}"
echo "        BINS: naken_asm${CONFIG_EXT}, naken_util${CONFIG_EXT}, naken_prog${CONFIG_EXT}"
echo
echo "Now type: make"
echo




